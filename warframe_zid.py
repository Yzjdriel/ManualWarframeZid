from __future__ import annotations

import functools
from typing import List, Dict, Set

from dataclasses import dataclass

from Options import Toggle, OptionSet

from ..game import Game
from ..game_objective_template import GameObjectiveTemplate

from ..enums import KeymastersKeepGamePlatforms

#Options Dataclass
@dataclass
class WarframeZidArchipelagoOptions:
  manual_installed: ManualInstalled#you don't necessarily need to use my manual for this, but it could be really funny
#end classdef
  
#Main class
class WarframeZid(Game):
  name = "Warframe_Zid"
  platform = KeymastersKeepGamePlatforms.PC
  platforms_other = [
    KeymastersKeepGamePlatforms.IOS,#yes, there's a full version of Warframe on iOS... somehow
    KeymastersKeepGamePlatforms.XONE,
    KeymastersKeepGamePlatforms.XSX,
    KeymastersKeepGamePlatforms.PS4,
    KeymastersKeepGamePlatforms.PS5,
    KeymastersKeepGamePlatforms.SW,
  ]
  is_adult_only_or_unrated = False
  options_cls = WarframeZidArchipelagoOptions

  #Optional Game Constraints
  def optional_game_constraint_templates(self) -> List[GameObjectiveTemplate]:
    return [
      
    ]
    #enddef

    #Main Objectives
    def game_objective_templates(self) -> List[GameObjectiveTemplate]:
      return [
        GameObjectiveTemplate(
          label="Clear the full Manual as a Singleplayer AP Sync",#this is the evilest option
          is_time_consuming=True,
          is_difficult=True,
          weight=1,
        ),
        GameObjectiveTemplate(
          label="Clear NODES on PLANET",
          data={
            "NODES": (self.planetnodes, 1),
            "PLANET": (self.planets, 1),
            "MATCHMAKING": (self.matchmaking, 1),
          },
          is_time_consuming=True,
          is_difficult=False,
          weight=20,
        ),
        GameObjectiveTemplate(
          label="Clear NODES on PLANET while playing in MATCHMAKING",
          data={
            "NODES": (self.planetnodes, 1),
            "PLANET": (self.planets, 1),
            "MATCHMAKING": (self.matchmaking, 1),
          },
          is_time_consuming=True,
          is_difficult=False,
          weight=10,
        ),
        GameObjectiveTemplate(
          label="Clear NODES on PLANET while playing in MATCHMAKING using WARFRAME and WEAPONS",
          data={
            "NODES": (self.planetnodes, 1),
            "PLANET": (self.planets, 1),
            "MATCHMAKING": (self.matchmaking, 1),
            "WARFRAME": (self.warframes, 1),
            "WEAPONS": (self.weaponclasses, 1),
          },
          is_time_consuming=True,
          is_difficult=True,
          weight=5,
        ),
        GameObjectiveTemplate(
          label="Do the Sortie",
          is_time_consuming=False,
          is_difficult=False,
          weight=25,
        ),
        GameObjectiveTemplate(
          label="Do an Archon Hunt",
          is_time_consuming=False,
          is_difficult=False,
          weight=5,
        ),
        GameObjectiveTemplate(
          label="Collect the C drop from an Arbitration",
          is_time_consuming=True,
          is_difficult=True,
          weight=10,
        ),
        GameObjectiveTemplate(
          label="Clear PLANET Solo with WARFRAME",
          data={
            "PLANET": (self.planets, 1),
            "WARFRAME": (self.warframes, 1)
          },
          is_time_consuming=True,
          is_difficult=False,
          weight=15,
        ),
        GameObjectiveTemplate(
          label="Collect the C Drop from ENDLESS mission on PLANET",
          data={
            "ENDLESS", (self.endless, 1)
          },
          is_time_consuming=True,
          is_difficult=False,
          weight=15,
        ),
        GameObjectiveTemplate(
          label="Help Clem",
          is_time_consuming=False,
          is_difficult=False,
          weight=20,
        ),
        GameObjectiveTemplate(
          label="Help Maroo",
          is_time_consuming=False,
          is_difficult=False,
          weight=20,
        ),
        GameObjectiveTemplate(
          label="Open ERA Relic",
          data={
            "ERA": (self.eras),
          },
          is_time_consuming=False,
          is_difficult=False,
          weight=50,
        ),
        GameObjectiveTemplate(
          label="Replay The Second Dream",
          is_time_consuming=True,
          is_difficult=False,
          weight=5,
        ),
        GameObjectiveTemplate(
          label="Replay The War Within",
          is_time_consuming=True,
          is_difficult=False,
          weight=5,
        ),
        GameObjectiveTemplate(
          label="Complete SINGLENODE",
          data={
          },
          is_time_consuming=False,
          is_difficult=False,
          weight=100,
        ),
        GameObjectiveTemplate(
          label="Complete NUMBER rotations in a single mission on ENDLESSNODE",
          data={
          },
          is_time_consuming=False,
          is_difficult=False,
          weight=50,
        ),
        GameObjectiveTemplate(
          label="Farm for WARFRAME",
          data={
            "WARFRAME": (self.warframes, 1)
          },
          is_time_consuming=True,
          is_difficult=False,
          weight=10,
        ),
      ]
    #enddef

    #Option Properties
    @property
    def include_hard_challenges(self) -> bool:
      return bool(self.archipelago_options.include_hard_challenges.value)

    @property
    def manual_installed(self) -> bool:
      return bool(self.archipelago_options.manual_installed.value)
    #Datasets
    @staticmethod
    def weaponclasses() -> List[str]:
      return [
        "an Automatic Rifle",
        "a Launcher",
        "a Shotgun",
        "a Sniper Rifle",
        "a Speargun",
        "a Semiautomatic Rifle",
        "a Beam Weapon",
        "a Bow",
        "a Pistol",
        "a Thrown Weapon",
        "a Sword",
        "a Glaive",
        "a Whip",
        "a Sparring Weapon",
        "a Polearm",
        "a Exalted Weapon",
        "a Modular Weapon"
      ]
    #enddef

    def eras() -> List[]:
      return [
        "a Lith",
        "a Meso",
        "a Neo",
        "an Axi",
        "a Requium"
      ]
    #enddef

    def endless() -> List[]:
      return [
        "a Defense",
        "an Interception",
        "an Excavation",
        "a Survival"
      ]
    #enddef

    def allnodes() -> List[]:
      return [
        "E Prime",
        "Mariana",
        "Lith",
        "Eurasia",
        "Mantle",
        "Gaia",
        "Pacific",
        "Cambria",
        "Saya's Visions",
        "a Bounty on the Plains of Eidolon",
        "Everest",
        "Cervantes",
        "Erpo",
        "Oro",
        "Coba",
        "Tikal",
        "Plato",
        "Zeipel",
        "Tycho",
        "Pavlov",
        "Apollo",
        "St√∂fler",
        "Grimaldi",
        "Copernicus",
        "Yuvarium",
        "Circulus",
        "E Gate",
        "Kiliken",
        "Aphrodite",
        "Cytherean",
        "V Prime",
        "Romula",
        "a Bounty on the Orb Vallis",
        "Tessera",
        "Linea",
        "Ishtar",
        "Montes",
        "Malva",
        "Venera",
        "Unda",
        "Fossa",
        "M Prime",
        "Terminus",
        "Lares",
        "Boethius",
        "Apollodorus",
        "Pantheon",
        "Caloris",
        "Elion",
        "Suisei",
        "Odin",
        "Tolstoj",
        "Ares",
        "Tharsis",
        "Gradivus",
        "Augustus",
        "Arval",
        "Hellas",
        "Olympus",
        "War",
        "Martialis",
        "Vallis",
        "Spear",
        "Tyana Pass",
        "Alator",
        "Ultor",
        "Kadesh",
        "Wahiba",
        "Roche",
        "Sharpless",
        "Gulliver",
        "Kepler",
        "Memphis",
        "Zeugma",
        "Iliad",
        "Shklovsky",
        "Skyresh",
        "Monolith",
        "Stickney",
        "Pallas",
        "Bode",
        "Casta",
        "Seimeni",
        "Lex",
        "Gabii",
        "Ludi",
        "Ker",
        "Draco",
        "Kiste",
        "Thon",
        "Cinxia",
        "Nuovo",
        "Exta",
        "the Abyssal Zone",
        "Horend",
        "Phlegyas",
        "a Bounty in the Cambion Drift",
        "Formido",
        "Hyf",
        "Dirus",
        "Magnacidium",
        "Terrorem",
        "Exequias",
        "a Bounty in the Sanctum Anatomica",
        "Armatus",
        "Nex",
        "Persto",
        "Cambire",
        "Munio",
        "Effervo",
        "Elara",
        "Adrastea",
        "Io",
        "Themisto",
        "Ganymede",
        "The Ropalolyst fight",
        "Thebe",
        "Galilea",
        "Carpo",
        "Carme",
        "Metis",
        "Ananke",
        "Callisto",
        "Cameria",
        "Amalthea",
        "Sinai",
        "Morax",
        "Orias",
        "Valac",
        "Kokabiel",
        "Naamah",
        "Armaros",
        "Abaddon",
        "Larzac",
        "Ose",
        "Sorath",
        "Paimon",
        "Baal",
        "Cholistan",
        "Cassini",
        "Numa",
        "Pandora",
        "Caracol",
        "Enceladus",
        "Titan",
        "Helene",
        "Dione",
        "Anthe",
        "Rhea",
        "Piscinas",
        "Calypso",
        "Keeler",
        "Telesto",
        "Tethys",
        "Sycorax",
        "Ariel",
        "Cressida",
        "Ur",
        "Caelus",
        "Desdemona",
        "Brutus",
        "Rosalind",
        "Caliban",
        "Stephano",
        "Umbriel",
        "Ophelia",
        "Puck",
        "Assur",
        "Titania",
        "Galatea",
        "Despina",
        "Sao",
        "Proteus",
        "Kelashin",
        "Laomedeia",
        "Triton",
        "Larissa",
        "Neso",
        "Salacia",
        "Yursa",
        "Nereid",
        "The Index",
        "Psamathe",
        "Hydra",
        "Narcissus",
        "Cypress",
        "Cerberus",
        "Palus",
        "Hades",
        "Outer Terminus",
        "Sechura",
        "Minthe",
        "Oceanum",
        "Regna",
        "Hieracon",
        "Acheron",
        "Naeglar",
        "Isos",
        "Oestrus",
        "Solium",
        "Nimus",
        "Akkad",
        "Brugia",
        "Kala-Azar",
        "Xini",
        "Zabala",
        "Saxis",
        "the Mutalist Alad V fight",
        "the Jordas Golem fight",
        "Naga",
        "Rusalka",
        "Hydron",
        "Kappa",
        "Amarna",
        "Berehynia",
        "Sangeru",
        "Adaro",
        "Selkie",
        "Charybdis",
        "Kelpie",
        "Marid",
        "Nakki",
        "Yam",
        "Yodyanoi",
        "Merrow",
        "Dakata",
        "Koro",
        "Pago",
        "Taveuni",
        "Rotuma",
        "Garus",
        "Tamu",
        "Teshub",
        "Hepit",
        "Taranis",
        "Tiwaz",
        "Stribog",
        "Ani",
        "Ukko",
        "Oxomoco",
        "Belenus",
        "Aten",
        "Marduk",
        "Mithra",
        "Mot",
        "a Bounty on the Zariman Ten-Zero",
        "Tuvul Commons",
        "Everview Arc",
        "Halako Perimeter",
        "Oro Works",
        "The Greenway",
        "The Sorrowful Soprano",
        "The Covetous Courtier",
        "The Prince of Fire",
        "The Fearful Conspirator",
        "The Harbinger of Joy",
        "The Circuit",
        "Rhu Manor",
        "Mausoleum East",
        "Mischta Ramparts",
        "Old Konderuk",
        "Solstice Square",
        "K√∂binn West",
        "Lower Vehrvod",
        "Vehrvod District",
        "Victory Plaza",
      ]
    #enddef

    def endlessnodes() -> List[]:
      return [
        "Lith",
        "Gaia",
        "Everest",
        "Coba",
        "Tikal",
        "Tycho",
        "Apollo",
        "St√∂fler",
        "Yuvarium",
        "Circulus",
        "Aphrodite",
        "Cytherean",
        "V Prime",
        "Romula",
        "Tessera",
        "Malva",
        "Lares",
        "Apollodorus",
        "Odin",
        "Augustus",
        "Olympus",
        "Spear",
        "Tyana Pass",
        "Alator",
        "Kadesh",
        "Wahiba",
        "Gulliver",
        "Memphis",
        "Zeugma",
        "Shklovsky",
        "Stickney",
        "Casta",
        "Seimeni",
        "Gabii",
        "Draco",
        "Cinxia",
        "Hyf",
        "Terrorem",
        "Armatus",
        "Persto",
        "Cambire",
        "Munio",
        "Elara",
        "Io",
        "Ganymede",
        "Callisto",
        "Cameria",
        "Sinai",
        "Larzac",
        "Ose",
        "Paimon",
        "Cholistan",
        "Caracol",
        "Titan",
        "Helene",
        "Rhea",
        "Piscinas",
        "Ur",
        "Caelus",
        "Stephano",
        "Umbriel",
        "Ophelia",
        "Assur",
        "Despina",
        "Proteus",
        "Kelashin",
        "Laomedeia",
        "Yursa",
        "The Index",
        "Cerberus",
        "Palus",
        "Outer Terminus",
        "Sechura",
        "Hieracon",
        "Oestrus",
        "Nimus",
        "Akkad",
        "Kala-Azar",
        "Xini",
        "Zabala",
        "Hydra",
        "Kappa",
        "Amarna",
        "Berehynia",
        "Sangeru",
        "Selkie",
        "Nabuk",
        "Taveuni",
        "Tamu",
        "Taranis",
        "Ani",
        "Belenus",
        "Mithra",
        "Mot",
        "Tuvul Commons",
        "Everview Arc",
        "Oro Works",
        "The Circuit",
        "Mischta Ramparts",
        "K√∂binn West",
      ]
    #enddef
    
    def planetnodes() -> List[]:
      return [
        "All Nodes",
        "All Endless Nodes",
        "All Dark Sector Nodes",
        "All Non-Endless Nodes",
        "All Boss Nodes",
        "Any Endless Node",
        "A Defense Node",
        "An Interception Node",
        "An Excabation Node",
        "A Survival Node",
        "An Alchemy Node",
        "An Infested Salvage Node",
        "An Exterminate Node",
        "A Sabotage Node",
        "A Mobile Defense Node",
        "A Spy Node",
        "A Rescue Node",
        "A Hijack Node",
        "An Ascension Node",
        "A Nightmare Node",
      ]
    #enddef
    
    def matchmaking() -> List[]:
      return [
        "Solo Mode",
        "a Premade Group/Friends Only/Invite Only",
        "Pubs"
      ]
    #enddef
    
    def warframes() -> List[str]:
      return [
        "Ash",
        "Atlas",
        "Banshee",
        "Baruuk",
        "Caliban",
        "Chroma",
        "Citrine",
        "Cyte-09",
        "Dagath",
        "Dante",
        "Ember",
        "Equinox",
        "Excalibur",
        "Frost",
        "Gara",
        "Garuda",
        "Gauss",
        "Grendel",
        "Gyre",
        "Harrow",
        "Hildryn",
        "Hydroid",
        "Inaros",
        "Ivara",
        "Jade",
        "Khora",
        "Koumei",
        "Kullervo",
        "Lavos",
        "Limbo",
        "Loki",
        "Mag",
        "Mesa",
        "Mirage",
        "Nekros",
        "Nezha",
        "Nidus",
        "Nova",
        "Nyx",
        "Oberon",
        "Octavia",
        "Protea",
        "Qorvex",
        "Revenant",
        "Rhino",
        "Saryn",
        "Sevagoth",
        "Styanax",
        "Temple",
        "Titania",
        "Trinity",
        "Valkyr",
        "Vauban",
        "Volt",
        "Voruna",
        "Wisp",
        "Wukong",
        "Xaku",
        "Yareli",
        "Zephyr"
      ]
    #enddef
#end classdef

#AP Options
class ManualInstalled(Toggle):
  """
  Indicates whether you want to use Zid's Warframe Manual for some of the generated options.
  WARNING: DO NOT USE IN SYNCHRONOUS SESSIONS.
  """
  display_name="Include Objectives from Zid's Manual (Separate Installation Required) (May cause objectives to take upwards of 24 hours to complete)"
#end classdef
